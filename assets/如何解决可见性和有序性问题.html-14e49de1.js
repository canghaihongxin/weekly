const e=JSON.parse('{"key":"v-1184f437","path":"/guide/ConcurrentProgramming/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%8F%AF%E8%A7%81%E6%80%A7%E5%92%8C%E6%9C%89%E5%BA%8F%E6%80%A7%E9%97%AE%E9%A2%98.html","title":"Happens-Before解决可见性问题","lang":"zh-CN","frontmatter":{"description":"Happens-Before解决可见性问题 关于Happens-Before的理解翻译问题 JSR-133 提出了 happens-before 的概念，通过这个概念来阐述操作之间的内存可见性 因为是在多个线程之间并且有可见性的问题，可以把这个单词理解为： 之前发生的事情。 一个线程可以看到另一个线程之前的操作 1. 程序顺序规则 一个线程中，按照程序顺序，前面的操作 Happens-Before 于后续的任意操作。 下面的代码代码1Happens-Before 代码2, 因此结果肯定是66。 这就是Happens-Before原则， 编译器也不会对这段代码进行排序优化。","head":[["meta",{"property":"og:url","content":"https://github.com/canghaihongxin/weekly/guide/ConcurrentProgramming/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%8F%AF%E8%A7%81%E6%80%A7%E5%92%8C%E6%9C%89%E5%BA%8F%E6%80%A7%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"程序员指南"}],["meta",{"property":"og:title","content":"Happens-Before解决可见性问题"}],["meta",{"property":"og:description","content":"Happens-Before解决可见性问题 关于Happens-Before的理解翻译问题 JSR-133 提出了 happens-before 的概念，通过这个概念来阐述操作之间的内存可见性 因为是在多个线程之间并且有可见性的问题，可以把这个单词理解为： 之前发生的事情。 一个线程可以看到另一个线程之前的操作 1. 程序顺序规则 一个线程中，按照程序顺序，前面的操作 Happens-Before 于后续的任意操作。 下面的代码代码1Happens-Before 代码2, 因此结果肯定是66。 这就是Happens-Before原则， 编译器也不会对这段代码进行排序优化。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-14T07:25:20.000Z"}],["meta",{"property":"article:author","content":"生活富能量"}],["meta",{"property":"article:modified_time","content":"2023-06-14T07:25:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Happens-Before解决可见性问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-14T07:25:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"生活富能量\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[{"level":3,"title":"关于Happens-Before的理解翻译问题","slug":"关于happens-before的理解翻译问题","link":"#关于happens-before的理解翻译问题","children":[]},{"level":3,"title":"1. 程序顺序规则","slug":"_1-程序顺序规则","link":"#_1-程序顺序规则","children":[]},{"level":3,"title":"2. volatile变量规则","slug":"_2-volatile变量规则","link":"#_2-volatile变量规则","children":[]},{"level":3,"title":"3. 传递性","slug":"_3-传递性","link":"#_3-传递性","children":[]},{"level":3,"title":"4. 管程锁定规则（Monitor Lock Rule）","slug":"_4-管程锁定规则-monitor-lock-rule","link":"#_4-管程锁定规则-monitor-lock-rule","children":[]},{"level":3,"title":"5. 线程启动规则（Thread Start Rule）","slug":"_5-线程启动规则-thread-start-rule","link":"#_5-线程启动规则-thread-start-rule","children":[]},{"level":3,"title":"6. 线程终止规则（Thread Termination Rule）","slug":"_6-线程终止规则-thread-termination-rule","link":"#_6-线程终止规则-thread-termination-rule","children":[]},{"level":3,"title":"7. 线程中断规则（Thread Interruption Rule）","slug":"_7-线程中断规则-thread-interruption-rule","link":"#_7-线程中断规则-thread-interruption-rule","children":[]},{"level":3,"title":"8. 对象终结规则（Finalizer Rule）","slug":"_8-对象终结规则-finalizer-rule","link":"#_8-对象终结规则-finalizer-rule","children":[]}],"git":{"createdTime":1686727520000,"updatedTime":1686727520000,"contributors":[{"name":"tianpeirong","email":"tianpeirong1234","commits":1}]},"readingTime":{"minutes":5.28,"words":1585},"filePathRelative":"guide/ConcurrentProgramming/如何解决可见性和有序性问题.md","localizedDate":"2023年6月14日","excerpt":"<h1> Happens-Before解决可见性问题</h1>\\n<h3> 关于Happens-Before的理解翻译问题</h3>\\n<p>JSR-133 提出了 happens-before 的概念，通过这个概念来阐述操作之间的内存可见性</p>\\n<p>因为是在多个线程之间并且有可见性的问题，可以把这个单词理解为： <strong>之前发生的事情</strong>。 一个线程可以看到另一个线程之前的操作</p>\\n<h3> 1. 程序顺序规则</h3>\\n<p>一个线程中，按照程序顺序，前面的操作 Happens-Before 于后续的任意操作。</p>\\n<p>下面的代码代码1Happens-Before 代码2,  因此结果肯定是66。 这就是Happens-Before原则， 编译器也不会对这段代码进行排序优化。</p>","autoDesc":true}');export{e as data};
